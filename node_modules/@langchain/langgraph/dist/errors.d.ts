import { Interrupt } from "./constants.js";
export type BaseLangGraphErrorFields = {
    lc_error_code?: string;
};
export declare class BaseLangGraphError extends Error {
    lc_error_code?: string;
    constructor(message?: string, fields?: BaseLangGraphErrorFields);
}
export declare class GraphRecursionError extends BaseLangGraphError {
    constructor(message?: string, fields?: BaseLangGraphErrorFields);
    static get unminifiable_name(): string;
}
export declare class GraphValueError extends BaseLangGraphError {
    constructor(message?: string, fields?: BaseLangGraphErrorFields);
    static get unminifiable_name(): string;
}
export declare class GraphInterrupt extends BaseLangGraphError {
    interrupts: Interrupt[];
    constructor(interrupts?: Interrupt[], fields?: BaseLangGraphErrorFields);
    static get unminifiable_name(): string;
}
/** Raised by a node to interrupt execution. */
export declare class NodeInterrupt extends GraphInterrupt {
    constructor(message: string, fields?: BaseLangGraphErrorFields);
    static get unminifiable_name(): string;
}
export declare function isGraphInterrupt(e?: GraphInterrupt | Error): e is GraphInterrupt;
export declare class EmptyInputError extends BaseLangGraphError {
    constructor(message?: string, fields?: BaseLangGraphErrorFields);
    static get unminifiable_name(): string;
}
export declare class EmptyChannelError extends BaseLangGraphError {
    constructor(message?: string, fields?: BaseLangGraphErrorFields);
    static get unminifiable_name(): string;
}
export declare class InvalidUpdateError extends BaseLangGraphError {
    constructor(message?: string, fields?: BaseLangGraphErrorFields);
    static get unminifiable_name(): string;
}
export declare class MultipleSubgraphsError extends BaseLangGraphError {
    constructor(message?: string, fields?: BaseLangGraphErrorFields);
    static get unminifiable_name(): string;
}
/**
 * Exception raised when an error occurs in the remote graph.
 */
export declare class RemoteException extends BaseLangGraphError {
    constructor(message?: string, fields?: BaseLangGraphErrorFields);
    static get unminifiable_name(): string;
}
/**
 * Used for subgraph detection.
 */
export declare const getSubgraphsSeenSet: () => any;
